@use '../mixins/config' as *;
@use '../mixins/theme' as *;
@use '../mixins/function' as *;

@mixin generateThemeColor($color) {
  [#{$accent-color-name + '=' + $color}] {
    @for $num from 1 through 12 {
      #{getVarName(($accent-name, $num))}: var(#{getVarName(($color, $num))});
      #{getVarName(($accent-name, 'a' + $num))}: var(#{getVarName(($color, 'a' + $num))});
    }
  }
}

@mixin mapGrayColor($target) {
  &:where([#{$gray-color-name + '=' + $target}]) {
    @for $num from 1 through 12 {
      #{getVarName(($gray-name, $num))}: var(#{getVarName(($target, $num))});
      #{getVarName(($gray-name, 'a' + $num))}: var(#{getVarName(($target, 'a' + $num))});
    }
  }
}

#{$theme-provider-el-name} {
  // default accent color
  $color: $default-accent-color;
  &:not([#{$accent-color-name}]) {
    @for $num from 1 through 12 {
      #{getVarName(($accent-name, $num))}: var(#{getVarName(($color, $num))});
      #{getVarName(($accent-name, 'a' + $num))}: var(#{getVarName(($color, 'a' + $num))});
    }
  }

  // map gray colors
  @each $color in $gray-color-list {
    @include mapGrayColor($color);
  }
  // default gray color
  &:not([#{$gray-color-name}]) {
    @for $num from 1 through 12 {
      #{getVarName(($gray-name, $num))}: var(#{getVarName(($default-gray-color, $num))});
      #{getVarName(($gray-name, 'a' + $num))}: var(#{getVarName(($default-gray-color, 'a' + $num))});
    }
  }

  // semantic colors
  @include appearance(true) {
    color-scheme: light;
    @include semanticColor('background', white);
    @include semanticColor('overlay', getColor('black', 'a6'));
    @include semanticColor('panel-solid', white);
    @include semanticColor('panel-translucent', rgba(255, 255, 255, 0.8));
    @include semanticColor('surface', rgba(255, 255, 255, 0.9));
  }
  @include appearance(false) {
    color-scheme: dark;
    @include semanticColor('background', getColor('gray', 1));
    @include semanticColor('overlay', getColor('black', 'a8'));
    @include semanticColor('panel-solid', getColor('gray', 2));
    // @include semanticColor('panel-translucent', rgba(255, 255, 255, 0.8));
    @include semanticColor('surface', rgba(0, 0, 0, 0.25));
  }

}

@each $color in $color-list {
  @include generateThemeColor($color);
}

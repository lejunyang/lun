@use '../../mixins' as *;

:host {
  display: block;
}

@include b(tabs) {
  display: flex;
  @include declareVars((gap));
  @include e(wrapper) {
    display: flex;
    scrollbar-width: none;
    position: relative;
    box-sizing: border-box;
    @include declareVars(
      (
        gap: wrapper-gap,
        padding: wrapper-padding,
      )
    );
    @include declareVars((font-size, line-height));
    @include declareReuseVars((border-radius));
    &::-webkit-scrollbar {
      display: none;
    }
    &::after {
      content: '';
      position: absolute;
      background-color: getAccentColor(9);
      width: getVarValue(tabs-active-tab-width);
      transition: 0.3s;
    }
  }
  @include m(horizontal) {
    flex-direction: column;
    @include e(wrapper) {
      @include declareVars(
        (
          height: horizontal-wrapper-height,
        )
      );
      &::after {
        height: 2px;
        bottom: 0;
        left: getVarValue(tabs-active-tab-left);
      }
    }
  }
  @include m(vertical) {
    @include e(wrapper) {
      flex-direction: column;
      &::after {
        width: 2px;
        inset-inline-end: 0;
        top: getVarValue(tabs-active-tab-top);
        height: getVarValue(tabs-active-tab-height);
      }
    }
    @include e(tab) {
      @include declareVars(
        (
          height: vertical-tab-height,
        )
      );
    }
  }

  @include e(tab) {
    box-sizing: border-box;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
    cursor: pointer;
    color: getGrayColor(a11);
    position: relative;
    @include declareReuseVars(
      (
        padding-inline: tab-padding-inline,
        padding-block: tab-padding-block,
      ),
      true
    );
    @include hover {
      color: getGrayColor(12);
      &::after {
        content: '';
        position: absolute;
        inset-inline: getReuseVar(tab-padding-inline);
        inset-block: getReuseVar(tab-padding-block);
        background: getGrayColor(a3);
        @include reuseVars((border-radius));
      }
    }
    @include is(disabled) {
      cursor: not-allowed;
    }
    @include is(active) {
      color: getGrayColor(12);
    }
  }

  @include e(label) {
    @include declareReuseVars(
      (
        padding: label-padding,
        border-radius: label-border-radius,
      ),
      true
    );
  }

  @include e(content) {
    overflow: hidden;
    display: grid;
  }
  @include e(panel) {
    grid-area: 1/1;
    @include isN(active) {
      // as they all are place on 1/1 grid area and we are using content-visibility: hidden(it only hides the content, not the element itself)
      // we need to explicitly hide the element itself
      z-index: -1;
      pointer-events: none;
      overflow: hidden;
    }
  }

  @include size(1) {
    @include setVars(
      (
        gap: getSpaceValue(1),
        horizontal-wrapper-height: getSpaceValue(6),
        vertical-tab-height: getSpaceValue(5),
        wrapper-padding: getSpaceValue(1),
        wrapper-gap: getSpaceValue(1),
        tab-padding-block: getSpaceValue(1),
        tab-padding-inline: getSpaceValue(1),
        label-padding: 0 getSpaceValue(1),
        font-size: getFontSizeValue(1),
        line-height: getLineHeightValue(1),
        border-radius: getRadiusValue(1),
      )
    );
  }
  @include size(2) {
    @include setVars(
      (
        gap: getSpaceValue(2),
        horizontal-wrapper-height: getSpaceValue(7),
        vertical-tab-height: getSpaceValue(6),
        wrapper-padding: getSpaceValue(1),
        wrapper-gap: getSpaceValue(2),
        tab-padding-block: getSpaceValue(1),
        tab-padding-inline: getSpaceValue(1),
        label-padding: 0 getSpaceValue(2),
        font-size: getFontSizeValue(2),
        line-height: getLineHeightValue(2),
        border-radius: getRadiusValue(2),
      )
    );
  }
  @include size(3) {
    @include setVars(
      (
        gap: getSpaceValue(3),
        horizontal-wrapper-height: getSpaceValue(8),
        vertical-tab-height: getSpaceValue(7),
        wrapper-padding: getSpaceValue(2),
        wrapper-gap: getSpaceValue(3),
        tab-padding-block: getSpaceValue(2),
        tab-padding-inline: getSpaceValue(2),
        label-padding: 0 getSpaceValue(2),
        font-size: getFontSizeValue(3),
        line-height: getLineHeightValue(3),
        border-radius: getRadiusValue(3),
      )
    );
  }
}

// in case leaving element is hidden by isN(active)
.v-leave-active {
  z-index: 1;
}
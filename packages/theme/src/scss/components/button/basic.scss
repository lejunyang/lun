@use '../../mixins/bem' as *;
@use '../../mixins/theme' as *;
@use '../../mixins/function' as *;
@use '../../mixins/config' as *;

:host {
  display: inline-block;
}

.hold-enter-active {
  transition-duration: getVarValue((button, hold-on));
  background-color: getAccentColor(a7);
}

$button-loading-opacity: 0.7 !default;

@include b(button) {
  // reset
  appearance: none;
  background-color: transparent;
  border: none;
  font-size: inherit;
  font-family: inherit;
  line-height: inherit;
  letter-spacing: inherit;
  outline: none;
  color: inherit;
  padding: 0;
  margin: 0;
  text-align: initial;
  -webkit-tap-highlight-color: transparent;

  display: inline-flex;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
  flex-shrink: 0;
  user-select: none;
  vertical-align: top;
  cursor: pointer;

  @include is(disabled, true) {
    cursor: getDisabledCursor();
    & * {
      pointer-events: none;
    }
  }

  @include is(loading, true) {
    cursor: getLoadingCursor();
    opacity: getVarValue((button, loading-opacity), $button-loading-opacity);
    & * {
      pointer-events: none;
    }
  }

  &:where(:not(#{getVariant(ghost)})) {
    height: getVarValue((button, 'height'));
  }

  @include size(1) {
    #{getVarName((button, 'height'))}: getSpaceValue(5);
    border-radius: getRadiusValue(1);
    gap: getSpaceValue(1);
    font-size: getFontSizeValue(1);
    // line-height
    letter-spacing: getLetterSpacingValue(1);
    padding-inline: getSpaceValue(2);
  }
}

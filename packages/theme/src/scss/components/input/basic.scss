@use '../../mixins/bem' as *;
@use '../../mixins/theme' as *;
@use '../../mixins/function' as *;
@use '../../mixins/config' as *;

@use './basic.number.scss' as *;
@use './basic.password.scss' as *;

:host {
  display: inline-flex;
  max-inline-size: 100%;
  min-inline-size: 0;
  flex-grow: 1;
  flex-shrink: 1;
  vertical-align: bottom;
  height: min-content; // prevent input's height from stretching the container when it's multiple
}

@include b(input) {
  display: inline-flex;
  max-inline-size: 100%;
  flex-grow: 1;
  position: relative;
  vertical-align: bottom;

  @include declareReuseVars((font-size, line-height), true);
  @include declareReuseVars((block-size, padding-inline-start, letter-spacing, border-radius));

  :is(&:hover, &:focus-within) {
    @include isN(empty) {
      @include is(with-clear, false) {
        // make clearIcon show when hover
        @include em(suffix, clear-icon) {
          opacity: 1;
          z-index: 2;
          pointer-events: all;
          cursor: pointer;
        }
      }
      @include e(renderer) {
        opacity: 0 !important;
        pointer-events: none;
        z-index: -1 !important;
      }
    }
    @include e(inner-input) {
      opacity: 1;
    }
  }

  @include e(label, false) {
    display: flex;
    position: relative;
    cursor: text;
    box-sizing: border-box;
  }

  label {
    max-inline-size: 100%;
    flex-grow: 1;
  }

  @include is(disabled) {
    @include e(label) {
      cursor: getDisabledCursor();
    }
    @include e(inner-input) {
      cursor: getDisabledCursor();
    }
  }

  @include e(wrapper) {
    position: relative;
    overflow: auto;
    flex-grow: 1;
    scrollbar-width: thin;
  }

  // ----------------- inner input -----------------
  @include e(inner-input) {
    appearance: none;
    border-width: 0;
    -webkit-tap-highlight-color: transparent;
    outline: none;
    font-family: inherit;
    text-overflow: ellipsis;
    background-color: transparent;
    position: relative;
    z-index: 1;
    display: block;
    box-sizing: border-box;
    padding: 0;
    inline-size: 100%;
    line-height: inherit;

    @include reuseVars((block-size, font-size, padding-inline-start, letter-spacing));

    // placeholder and selection
    &::placeholder {
      color: getGrayColor(a10);
      // Firefox
      opacity: 1;
    }
    &:autofill {
      -webkit-text-fill-color: getGrayColor(12);
      caret-color: getGrayColor(12);
      box-shadow: inset 0 0 0 100px white;
      border: 1px solid getGrayColor(7);
      border-inline: none;
    }
    &:read-only {
      &::placeholder {
        color: getGrayColor(a7);
      }
      &::selection {
        background-color: getGrayColor(a5);
      }
    }
  }
  // ----------------- inner input -----------------

  @include e(renderer) {
    position: absolute;
    inset: 0;
    background-clip: content-box;
    display: flex;
    align-items: center;
    opacity: 0;
  }

  @include is(with-renderer, false, true) {
    @include e(inner-input) {
      opacity: 0;
      transition: opacity 0.3s ease;
    }
    @include e(renderer) {
      opacity: 1;
      z-index: 2;
    }
  }

  @include e(length-info, false) {
    color: getGrayColor(10);
    z-index: 1;
    display: flex;
    align-items: center;
  }

  // ----------------- background -----------------
  @include e('background') {
    position: absolute;
    inset: 0;
    z-index: 0;
    pointer-events: none;
    outline-color: transparent;
    @include reuseVars((border-radius));
    .#{$B}:focus-within & {
      outline: 2px solid getFocusColor();
      outline-offset: -1px;
    }
  }
  @include e(addon) {
    @include reuseVars((border-radius));
  }

  @include is(with-prepend) {
    @include e('background') {
      border-start-start-radius: 0;
      border-end-start-radius: 0;
    }
    @include e(prepend) {
      border-start-end-radius: 0;
      border-end-end-radius: 0;
    }
  }
  @include is(with-append) {
    @include e('background') {
      border-start-end-radius: 0;
      border-end-end-radius: 0;
    }
    @include e(append) {
      border-start-start-radius: 0;
      border-end-start-radius: 0;
    }
  }

  @include e(slot, false) {
    position: relative;
    z-index: 1;
    flex-shrink: 0;
    display: flex;
    align-items: center;
    justify-content: center; // minus icon needs this
    box-sizing: border-box;
    @include reuseVars((block-size));
    @include declareVars(
      (
        min-inline-size: slot-min-inline-size,
        padding-inline: slot-padding-inline,
      )
    );
    &#{getIs(empty, '', true)} {
      inline-size: 0;
      min-inline-size: 0;
      padding-inline: 0;
    }
  }

  @include e(suffix, true) {
    @include m(clear-icon) {
      position: relative;
      opacity: 0;
      pointer-events: none;
      z-index: -1;
      transition: opacity 0.3s ease;
      display: flex;
      align-items: center;
      justify-content: center;

      .#{$B}:hover &:not(:empty) {
        opacity: 1;
        z-index: 2;
        pointer-events: all;
        cursor: pointer;
      }
    }
  }
  // suffix slot default content clear-icon
  slot .#{getBEM(input, suffix, clear-icon)} {
    position: relative;
  }

  // ----------------- float label, carousel label -----------------
  @include em(label, special, true) {
    position: absolute;
    display: inline-block;
    inset-block-start: 0;
    z-index: 1;
    transition: all 0.3s ease-out;
    color: getGrayColor(a10);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    --base: 100%;
    // use input's font-size, line-height, block-size
    @include reuseVars((font-size, line-height, block-size));
    // use input's padding-inline-start as label's inset-inline-start
    @include reuseVars(
      (
        inset-inline-start: padding-inline-start,
      )
    );
    @include declareVarValues(
      (
        // reduce two paddings, limit the width of label
        max-inline-size: calc(var(--base) - #{getReuseVar(padding-inline-start)} * 2)
      )
    );
  }
  @include em(label, has-carousel, true) {
    overflow: hidden;
  }
  @include em(label, float, true) {
    .#{$B}:focus-within &,
    .#{getIsN(empty, $B, true)} & {
      inset-block-start: -50%;
      color: fieldtext;
      z-index: 1;
      transform: scale(0.8);
      transform-origin: 0 50%; // horizontal needs to be 0, or it will be away from the left edge when label is too long
      --base: 125%; // base becomes 125% as the label is scaled to 0.8
      #{getEM(label, float-background)} {
        opacity: 1;
        background: getSemanticColor('background');
        // extra white length
        // useless, parent is not wide enough
        // left: -3px;
        // right: -3px;
      }
    }

    @include em(label, float-background) {
      opacity: 0;
      height: 4px;
      position: absolute;
      overflow: hidden;
      top: calc(50% - 2px);
      color: white;
      z-index: -1;
      left: 0;
      right: 0;
      transition: left 0s 0.25s, right 0s 0.25s, background-color 0s 0.25s; // delay for label positioned
      &:empty {
        display: none;
      }
    }
  }
  // ----------------- float label, carousel label -----------------

  // ----------------- tag-container -----------------
  @include e(tag-container) {
    position: relative;
    z-index: 1;
    display: inline-flex;
    align-items: center;
    flex-wrap: wrap;
    overflow-y: hidden;
    @include declareVars(
      (
        padding: tag-container-padding,
        gap: tag-container-gap,
      )
    );
    @include declareVarValues(
      (
        min-width: (
          tag-container-min-width,
          140px,
        ),
      )
    );
    @include is(no-tags) {
      @include reuseVars(
        (
          // tag-container-padding is smaller than input's padding, it's weird when input is empty, so use input's padding when no tags
          padding-inline-start
        )
      );
    }
    @include isN(wrap) {
      flex-wrap: nowrap;
    }
  }
  // ----------------- tag-container -----------------

  // ----------------- multiple input wrapper -----------------
  @include e(multi-input-wrapper) {
    display: inline-grid;
    position: relative;
    &::after,
    input {
      grid-area: 1 / 1;
      min-width: 1em;
      @include declareVars(
        (
          block-size: multi-input-block-size,
        )
      );
    }
    &::after {
      content: attr(data-value) ' ';
      visibility: hidden;
      white-space: pre-wrap;
    }
  }

  // ----------------- size -----------------
  @include size(1) {
    @include setVars(
      (
        border-radius: getRadiusValue(2, 'full'),
        font-size: getFontSizeValue(1),
        block-size: getSpaceValue(5),
        line-height: getSpaceValue(5),
        slot-min-inline-size: getSpaceValue(5),
        slot-padding-inline: getSpaceValue(1),
        multi-input-block-size: getLineHeightValue(1),
        tag-container-padding: getSpaceValue(1),
        tag-container-gap: getSpaceValue(1),
        padding-inline-start: getSpaceValue(1),
        letter-spacing: getLetterSpacingValue(1),
      )
    );
    @include e(slot) {
      gap: getSpaceValue(2);
    }
    @include e(length-info) {
      padding-inline: getSpaceValue(1);
      font-size: getFontSizeValue(1);
    }
  }
  @include size(2) {
    @include setVars(
      (
        border-radius: getRadiusValue(2, 'full'),
        block-size: getSpaceValue(6),
        font-size: getFontSizeValue(2),
        line-height: getSpaceValue(6),
        slot-min-inline-size: getSpaceValue(6),
        slot-padding-inline: getSpaceValue(2),
        multi-input-block-size: getLineHeightValue(2),
        tag-container-padding: getSpaceValue(1),
        tag-container-gap: calc(getSpaceValue(1) * 1.5),
        padding-inline-start: getSpaceValue(2),
        letter-spacing: getLetterSpacingValue(2),
      )
    );
    @include e(slot) {
      gap: getSpaceValue(2);
    }
    @include e(length-info) {
      padding-inline: getSpaceValue(2);
      font-size: getFontSizeValue(2);
    }
  }
  @include size(3) {
    @include setVars(
      (
        border-radius: getRadiusValue(3, 'full'),
        block-size: getSpaceValue(7),
        font-size: getFontSizeValue(3),
        line-height: getSpaceValue(7),
        slot-min-inline-size: getSpaceValue(7),
        slot-padding-inline: getSpaceValue(3),
        multi-input-block-size: getLineHeightValue(3),
        tag-container-padding: getSpaceValue(2),
        tag-container-gap: getSpaceValue(3),
        padding-inline-start: getSpaceValue(3),
        letter-spacing: getLetterSpacingValue(3),
      )
    );
    @include e(slot) {
      gap: getSpaceValue(3);
    }
    @include e(length-info) {
      padding-inline: getSpaceValue(3);
      font-size: getFontSizeValue(3);
    }
  }

  // multiple
  @include is(multiple) {
    @include e(inner-input) {
      inline-size: unset;
      block-size: unset; // input height is larger than tag, needs to be unset, or height of last line tags will be same as input's height
      line-height: normal; // same as height
      max-inline-size: 100%;
      display: inline-block;
      padding-inline-start: 0;
    }
    @include e(slot) {
      block-size: 100%; // for nowrap tags
    }
    @include e(suffix) {
      padding-inline-start: 0;
    }
  }
}

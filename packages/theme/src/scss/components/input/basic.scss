@use '../../mixins/bem' as *;
@use '../../mixins/theme' as *;
@use '../../mixins/function' as *;
@use '../../mixins/config' as *;

:host {
  display: inline-block;
}

@include b(input) {
  display: inline-flex;
  position: relative;
  vertical-align: bottom;

  :is(&:hover, &:focus-within) {
    @include is(not-empty) {
      @include is(with-clear, false) {
        // hide suffix slot content when hover
        slot::slotted(*) {
          opacity: 0;
          pointer-events: none;
          z-index: -1;
        }
        // make clearIcon show when hover
        @include em(suffix, clear-icon) {
          opacity: 1;
          z-index: 2;
          pointer-events: all;
          cursor: pointer;
        }
      }
    }
  }

  @include e(label, false) {
    display: flex;
    position: relative;
    cursor: text;
    box-sizing: border-box;
    @include is(float-label) {
      position: absolute;
      display: inline-block;
    }
  }

  @include is(disabled) {
    @include e(label) {
      cursor: getDisabledCursor();
    }
    @include e(inner-input) {
      cursor: getDisabledCursor();
    }
  }

  @include e(inner-input, false) {
    appearance: none;
    border-width: 0;
    -webkit-tap-highlight-color: transparent;
    outline: none;
    font-family: inherit;
    text-overflow: ellipsis;
    background-color: transparent;
    position: relative;
    z-index: 1;
    display: block;
    box-sizing: border-box;
    padding: 0;
    inline-size: 100%;

    // placeholder and selection
    &::placeholder {
      color: getGrayColor(a10);
      // Firefox
      opacity: 1;
    }
    &:autofill {
      -webkit-text-fill-color: getGrayColor(12);
      caret-color: getGrayColor(12);
      box-shadow: inset 0 0 0 100px white;
      border: 1px solid getGrayColor(7);
      border-inline: none;
    }
    &:read-only {
      &::placeholder {
        color: getGrayColor(a7);
      }
      &::selection {
        background-color: getGrayColor(a5);
      }
    }
  }

  @include e(length-info, false) {
    color: getGrayColor(10);
    z-index: 1;
    display: flex;
    align-items: center;
  }

  @include e('background', false) {
    position: absolute;
    inset: 0;
    z-index: 0;
    pointer-events: none;
    transition: border-color 0.3s ease;
    .#{$B}:focus-within & {
      /* box-shadow: inset 0 0 0 1px var(--accent-8), 0 0 0 1px var(--accent-a8), inset 0 0 0 100px var(--accent-3); */
      // box-shadow: inset 0 0 0 100px getAccentColor(3);
      // border: 1px solid getAccentColor(8);
      outline: 2px solid getFocusColor();
      outline-offset: -1px;
    }
  }

  @include e(slot, false) {
    position: relative;
    z-index: 1;
    flex-shrink: 0;
    display: flex;
    align-items: center;
    color: var(--accent-a11, --gray-a11);
    @include size(1) {
      .#{$E} {
        gap: var(--space-2);
        ::slotted(*) {
          padding-inline: var(--space-1);
        }
      }
    }
  }

  @include e(suffix, true) {
    @include m(clear-icon) {
      position: absolute;
      inset: 0;
      opacity: 0;
      pointer-events: none;
      z-index: -1;
      transition: opacity 0.3s ease;
      display: flex;
      align-items: center;
      justify-content: center;
      min-inline-size: 32px;

      .#{$B}:hover &:not(:empty) {
        opacity: 1;
        z-index: 2;
        pointer-events: all;
        cursor: pointer;
      }
    }
  }
  // suffix slot default content clear-icon
  slot .#{bem(input, suffix, clear-icon)} {
    position: relative;
  }

  @include e(custom-renderer) {
    position: absolute;
    /* inset: 0; width should be decided by content, otherwise empty renderer would cover the input */
    inline-size: auto;
    z-index: 2;
    background-color: white; /** TODO theme color */
    text-align: start;
    transition: opacity 0.3s linear;
    /* border-top: 1px solid var(--gray-a7); */
    /* border-bottom: 1px solid var(--gray-a7); */
    /* in case of covering input-back's border */
    border: 1px solid transparent;
    background-clip: content-box;
    .#{$B} & {
      /* display: none; */
      opacity: 0 !important;
      pointer-events: none;
      z-index: -1;
    }
  }

  // float label
  @include is(float-label, false, true) {
    top: 0;
    z-index: 0;
    transition: all 0.3s ease-out;
    color: getGrayColor(a10);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    .#{$B}:focus-within &,
    .#{getIs(not-empty, $B, true)} & {
      color: fieldtext;
      z-index: 1;
      transform: scale(0.8);
      transform-origin: 0 50%; // horizontal needs to be 0, or it will be away from the left edge when label is too long
      #{getEM(label, float-background)} {
        opacity: 1;
        background: getSemanticColor('background');
        /* extra white length */
        left: -3px;
        right: -3px;
      }
    }

    @include em(label, float-background) {
      opacity: 0;
      height: 3px;
      position: absolute;
      overflow: hidden;
      top: calc(50% - 1px);
      color: white;
      z-index: -1;
      left: 0;
      right: 0;
      transition: left 0 0.25s, right 0 0.25s, background-color 0 0.25s; // delay for label positioned
      &:empty {
        display: none;
      }
    }
  }

  @include e(tag-container) {
    position: relative;
    z-index: 1;
    display: inline-flex;
    align-items: center;
    min-width: var(#{getVarName(('input', 'tag-container', 'min-width'))}, 140px);
  }

  $empty: getIs(not-empty, $B);
  $float: getIs(float-label);
  // size
  @include size(1) {
    @include e(slot, true) {
      gap: getSpaceValue(2);
      ::slotted(*) {
        padding-inline: getSpaceValue(1);
      }
    }
    @include e(length-info, true) {
      padding-inline: getSpaceValue(1);
      font-size: getFontSizeValue(1);
    }
    @include e(inner-input, true) {
      height: getSpaceValue(5);
      // TODO padding? size?
      padding-block-start: 0.5px;
      padding-block-end: 1px;
      padding-inline-start: getSpaceValue(1);
      font-size: getFontSizeValue(1);
      letter-spacing: getLetterSpacingValue(1);
    }
    @include e(tag-container, true) {
      padding-inline-start: getSpaceValue(1);
      gap: getSpaceValue(1);
    }
    @include e('background', true) {
      border-radius: getRadiusValue(2);
    }
    @include is(float-label, false) {
      inset-inline-start: getSpaceValue(1);
      height: getSpaceValue(5);
      line-height: getSpaceValue(5);
      font-size: getFontSizeValue(1);
      max-inline-size: calc(100% - 2 * #{getSpaceValue(1)});
    }
    &.#{$B}:focus-within #{$float},
    &.#{$empty} #{$float} {
      inset-block-start: -50%;
      max-inline-size: calc(
        125% - 2 * #{getSpaceValue(1)}
      ); // suppose to be 100%, but scale(0.8) when active, 100 / 0.8
    }
  }
  @include size(2) {
    @include e(slot, true) {
      gap: getSpaceValue(2);
      ::slotted(*) {
        padding-inline: getSpaceValue(2);
      }
    }
    @include e(length-info, true) {
      padding-inline: getSpaceValue(2);
      font-size: getFontSizeValue(2);
    }
    @include e(inner-input, true) {
      height: getSpaceValue(6);
      padding-block-start: 0.5px;
      padding-block-end: 1px;
      padding-inline-start: getSpaceValue(2);
      font-size: getFontSizeValue(2);
      letter-spacing: getLetterSpacingValue(2);
    }
    @include e(tag-container, true) {
      padding-inline-start: getSpaceValue(2);
      gap: getSpaceValue(2);
    }
    @include e('background', true) {
      border-radius: getRadiusValue(2);
    }
    @include is(float-label, false) {
      inset-inline-start: getSpaceValue(2);
      height: getSpaceValue(6);
      line-height: getSpaceValue(6);
      font-size: getFontSizeValue(2);
      max-inline-size: calc(100% - 2 * #{getSpaceValue(2)});
    }
    &.#{$B}:focus-within #{$float},
    &.#{$empty} #{$float} {
      inset-block-start: -50%;
      max-inline-size: calc(125% - 2 * #{getSpaceValue(2)});
    }
  }
  @include size(3) {
    @include e(slot, true) {
      gap: getSpaceValue(3);
      ::slotted(*) {
        padding-inline: getSpaceValue(3);
      }
    }
    @include e(length-info, true) {
      padding-inline: getSpaceValue(3);
      font-size: getFontSizeValue(3);
    }
    @include e(inner-input, true) {
      height: getSpaceValue(7);
      padding-block-start: 0.5px;
      padding-block-end: 1px;
      padding-inline-start: getSpaceValue(3);
      font-size: getFontSizeValue(3);
      letter-spacing: getLetterSpacingValue(3);
    }
    @include e(tag-container, true) {
      padding-inline-start: getSpaceValue(3);
      gap: getSpaceValue(3);
    }
    @include e('background', true) {
      border-radius: getRadiusValue(3);
    }
    @include is(float-label, false) {
      inset-inline-start: getSpaceValue(3);
      height: getSpaceValue(7);
      line-height: getSpaceValue(7);
      font-size: getFontSizeValue(3);
      max-inline-size: calc(100% - 2 * #{getSpaceValue(3)});
    }
    &.#{$B}:focus-within #{$float},
    &.#{$empty} #{$float} {
      inset-block-start: -50%;
      max-inline-size: calc(125% - 2 * #{getSpaceValue(3)});
    }
  }

  // multiple
  @include is(multiple) {
    @include e(inner-input) {
      box-sizing: content-box;
      // inline-size: 5px;
      max-inline-size: 100%;
      display: inline-block;
      padding-inline-start: 0;
    }
  }
}

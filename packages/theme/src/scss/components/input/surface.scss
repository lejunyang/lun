@use '@/scss/mixins/bem' as *;
@use '@/scss/mixins/function' as *;

@include b(input) {
  display: flex;
  position: relative;
  &:hover {
    @include is(with-clear) {
      // hide suffix slot content when hover
      slot::slotted(*) {
        opacity: 0;
        pointer-events: none;
        z-index: -1;
      }
      // make clearIcon show when hover
      @include em(suffix, clear-icon) {
        opacity: 1;
        z-index: 2;
        pointer-events: all;
        cursor: pointer;
      }
    }
  }

  @include e(label, false) {
    display: flex;
    position: relative;
    cursor: text;
    box-sizing: border-box;
  }

  @include e(inner-input, false) {
    appearance: none;
    border-width: 0;
    -webkit-tap-highlight-color: transparent;
    outline: none;
    font-family: inherit;
    text-overflow: ellipsis;
    background-color: transparent;
    position: relative;
    z-index: 1;
    display: block;
    box-sizing: border-box;
    padding: 0;
    width: 100%;

    // placeholder and selection
    &::placeholder {
      color: var(--gray-a10);
      // Firefox
      opacity: 1;
    }
    &:autofill {
      -webkit-text-fill-color: var(--gray-12);
      caret-color: var(--gray-12);
      box-shadow: inset 0 0 0 100px white;
      border: 1px solid var(--gray-7);
      border-left: none;
      border-right: none;
    }
    &:read-only {
      &::placeholder {
        color: var(--gray-a7);
      }
      &::selection {
        background-color: var(--gray-a5);
      }
    }
  }

  @include e(length-info, false) {
    color: var(--gray-10);
    z-index: 1;
    display: flex;
    align-items: center;
  }

  @include e('background', false) {
    position: absolute;
    inset: 0;
    z-index: 0;
    pointer-events: none;
    transition: border-color 0.3s ease;
    .#{$B}:focus-within & {
      /* box-shadow: inset 0 0 0 1px var(--accent-8), 0 0 0 1px var(--accent-a8), inset 0 0 0 100px var(--accent-3); */
      box-shadow: inset 0 0 0 100px var(--accent-3);
      border: 2px solid var(--accent-8);
    }
  }

  @include e(slot, false) {
    position: relative;
    z-index: 1;
    flex-shrink: 0;
    display: flex;
    align-items: center;
    color: var(--accent-a11, --gray-a11);
    @include size(1) {
      .#{$E} {
        gap: var(--space-2);
        ::slotted(*) {
          padding-left: var(--space-1);
          padding-right: var(--space-1);
        }
      }
    }
  }

  @include e(suffix, true) {
    @include m(clear-icon) {
      position: absolute;
      inset: 0;
      opacity: 0;
      pointer-events: none;
      z-index: -1;
      transition: opacity 0.3s ease;
      display: flex;
      align-items: center;
      justify-content: center;
      min-width: 32px;

      .#{$B}:hover &:not(:empty) {
        opacity: 1;
        z-index: 2;
        pointer-events: all;
        cursor: pointer;
      }
      slot & {
        // suffix slot default content clear-icon
        position: relative;
      }
    }
  }

  @include e(custom-renderer) {
    position: absolute;
    /* inset: 0; width should be decided by content, otherwise empty renderer would cover the input */
    width: auto;
    z-index: 2;
    background-color: white; /** TODO theme color */
    text-align: start;
    transition: opacity 0.3s linear;
    /* border-top: 1px solid var(--gray-a7); */
    /* border-bottom: 1px solid var(--gray-a7); */
    /* in case of covering input-back's border */
    border: 1px solid transparent;
    background-clip: content-box;
    .#{$B} & {
      /* display: none; */
      opacity: 0 !important;
      pointer-events: none;
      z-index: -1;
    }
  }

  // float label
  @include is(float-label, false, true) {
    position: absolute;
    top: 0;
    z-index: 0;
    transition: all 0.3s ease-out;
    .#{$B}:focus-within &,
    .#{getIs(not-empty, $B)} & {
      z-index: 1;
      transform: scale(0.8);
    }

    @include em(label, float-background) {
      height: 3px;
      position: absolute;
      overflow: hidden;
      top: 50%;
      color: white;
      background: white;
      z-index: -1;
      /* extra white length */
      left: -5px;
      right: -5px;
      &:empty {
        display: none;
      }
    }
  }

  /* variant surface */
  @include variant(surface) {
    color: var(--gray-12);
    .#{$B}:autofill {
      box-shadow: inset 0 0 0 100px var(--color-surface);
    }
    &:focus-within {
      #{getE('background')} {
        box-shadow: inset 0 0 0 1px var(--accent-8), 0 0 0 1px var(--accent-a8);
      }
    }
    #{getE('background')} {
      background-color: var(--color-surface);
			/* box-shadow: inset 0 0 0 1px var(--gray-a7); */
			border: 1px solid var(--gray-a7);
    }
  }
}

@use '../../mixins' as *;

:host {
  display: inline-block;
  position: relative;
}
[popover] {
  margin: initial;
  padding: initial;
  border: initial;
  outline: initial;
  background-color: initial;
}
[popover] {
  // important!! If don't set overflow unset, the arrow will not show. Maybe it's due to top layer popover, no idea why
  overflow: unset;
}

@mixin popoverArrow() {
  @include declareReuseVars((arrow-size, arrow-hypot, arrow-clip-path));
  @include e(arrow) {
    @include reuseVars(
      (
        width: arrow-hypot,
        height: arrow-hypot,
      )
    );
    overflow: hidden;
    // use two pseudo elements to implement clip-path with shadows, ::before is the background, ::after is the shadow
    &::before {
      position: absolute;
      content: '';
      display: block;
      left: 0;
      background-color: getSemanticColor('panel-solid');
      z-index: 1;
      @include reuseVars(
        (
          width: arrow-hypot,
          height: arrow-hypot,
          clip-path: arrow-clip-path,
        )
      );
    }
    &::after {
      position: absolute;
      content: '';
      display: block;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%) rotate(45deg);
      box-shadow: getShadow(5);
      @include reuseVars(
        (
          width: arrow-size,
          height: arrow-size,
        )
      );
    }
  }
  @include is(side-top) {
    @include setVars(
      (
        arrow-clip-path: polygon(50% 100%, 0% 0%, 100% 0%),
      )
    );
    @include e(arrow) {
      &::before {
        top: 0;
        height: calc(#{getReuseVar(arrow-hypot)} / 2);
      }
      &::after {
        top: unset;
      }
    }
  }
  @include is(side-bottom) {
    @include setVars(
      (
        arrow-clip-path: polygon(50% 0%, 0% 100%, 100% 100%),
      )
    );
    @include e(arrow) {
      &::before {
        bottom: 0;
        height: calc(#{getReuseVar(arrow-hypot)} / 2);
      }
      &::after {
        top: 100%;
      }
    }
  }
  @include is(side-left) {
    @include setVars(
      (
        arrow-clip-path: polygon(100% 50%, 0% 0%, 0% 100%),
      )
    );
    @include e(arrow) {
      &::before {
        left: 0;
        width: calc(#{getReuseVar(arrow-hypot)} / 2);
      }
      &::after {
        left: unset;
      }
    }
  }
  @include is(side-right) {
    @include setVars(
      (
        arrow-clip-path: polygon(0% 50%, 100% 0%, 100% 100%),
      )
    );
    @include e(arrow) {
      &::before {
        left: unset;
        right: 0;
        width: calc(#{getReuseVar(arrow-hypot)} / 2);
      }
      &::after {
        left: 100%;
      }
    }
  }
}

@include b(popover) {
  @include declareReuseVars(
    (
      padding: content-padding,
      border-radius: border-radius,
    ),
    true
  );

  background-color: getSemanticColor('panel-solid');
  box-shadow: getShadow(5);
  box-sizing: border-box;

  // @include declareVars((transition));
  @include is(entered) {
    transition: all 0.2s cubic-bezier(0.23, 0.64, 0.34, 1);
    // do not use below way... found it will make nested popover transition abnormal... no idea why
    // @include setVars(
    //   (
    //     // transition: all 0.2s cubic-bezier(0.23, 0.64, 0.34, 1),
    //   )
    // );
  }

  @include popoverArrow;

  @include size(1) {
    @include setVars(
      (
        content-padding: getSpaceValue(1),
        arrow-size: getSpaceValue(1),
        arrow-hypot: getSpaceValue(1, true),
        border-radius: getRadiusValue(2),
      )
    );
  }
  @include size(2) {
    @include setVars(
      (
        content-padding: getSpaceValue(2),
        arrow-size: getSpaceValue(2),
        arrow-hypot: getSpaceValue(2, true),
        border-radius: getRadiusValue(3),
      )
    );
  }
  @include size(3) {
    @include setVars(
      (
        content-padding: getSpaceValue(4),
        arrow-size: getSpaceValue(3),
        arrow-hypot: getSpaceValue(3, true),
        border-radius: getRadiusValue(4),
      )
    );
  }
  @include size(4) {
    @include setVars(
      (
        content-padding: getSpaceValue(5),
        arrow-size: getSpaceValue(4),
        arrow-hypot: getSpaceValue(4, true),
        border-radius: getRadiusValue(5),
      )
    );
  }

  // ------------------------------ for select ------------------------------
  @include is(select) {
    padding: 0;
    @include declareVars(
      (
        border-radius: content-border-radius,
      )
    );
  }
  // ------------------------------ for select ------------------------------
}

@use '../../mixins/bem' as *;
@use '../../mixins/theme' as *;
@use '../../mixins/function' as *;
@use '../../mixins/config' as *;

@include b(radio) {
  $size: getVarName((switch, 'size'));
  $borderWidth: getVarName((switch, 'border-width'));

  display: inline-flex;
  align-items: center;
  cursor: pointer;

  @include declareVars((gap, font-size));

  @include e(indicator) {
    display: inline-block;
    box-sizing: border-box;
    width: var(#{$size});
    height: var(#{$size});
    box-shadow: inset 0 0 0 1px getGrayColor(a7);
    transition: box-shadow 0.2s, background-color 0.1s; // need background-color transition when dark
  }

  @include is(checked) {
    @include e(indicator) {
      // border-width will be rounded if it's decimal, so use box-shadow
      box-shadow: inset 0 0 0 calc(var(#{$size}) * 0.3) getAccentColor(9);
      background-color: getAccentColor(contrast);
    }
  }

  $disabledBorder: inset 0 0 0 1px getGrayColor(a6);
  @include is(disabled) {
    cursor: getDisabledCursor();
    @include e(indicator) {
      background-color: getGrayColor(3);
      box-shadow: $disabledBorder;
    }
  }

  @include is((checked, disabled)) {
    @include e(indicator) {
      background-color: getGrayColor(a8);
      box-shadow: $disabledBorder, inset 0 0 0 calc(var(#{$size}) * 0.3) getGrayColor(3);
    }
  }

  // ------------------------------radio button------------------------------
  @include is(button) {
    @include declareVars(
      (
        padding-inline: button-padding-inline,
        line-height: button-line-height,
        height: button-height,
      )
    );
    border: 1px solid getGrayColor(a6);
    border-inline-end: none;
    @include e(indicator) {
      display: none;
    }
    @include hover {
      background-color: getAccentColor(a4);
    }
  }
  @include is(start) {
    @include declareVars(
      (
        border-start-start-radius: button-border-radius,
        border-end-start-radius: button-border-radius,
      )
    );
  }
  @include is(end) {
    border-inline-end: 1px solid getGrayColor(a6);
    @include declareVars(
      (
        border-start-end-radius: button-border-radius,
        border-end-end-radius: button-border-radius,
      )
    );
  }
  @include is((button, disabled)) {
    color: getGrayColor(a8);
    background-color: getGrayColor(a3);
  }

  @include is((button, checked)) {
    background-color: getAccentColor(a5); // button soft
    border: 1px solid getAccentColor(7);
    position: relative; // set this to let the border of the checked one overlap the unchecked one, so that the border color won't be mixed
    &:not(#{getIs(end)}) {
      // to avoid two borders
      margin-inline-end: -1px;
    }
  }
  // ------------------------------radio button------------------------------

  @include size(1) {
    #{$size}: calc(#{getSpaceValue(4)} * 0.875);
    @include setVars(
      (
        gap: getSpaceValue(1),
        font-size: getFontSizeValue(1),
        button-border-radius: getRadiusValue(1),
        button-padding-inline: getSpaceValue(2),
        button-line-height: getLineHeightValue(1),
        button-height: getSpaceValue(5),
      )
    );
    @include e(indicator) {
      border-radius: getRadiusValue(1, false);
    }
  }
  @include size(2) {
    #{$size}: getSpaceValue(4);
    @include setVars(
      (
        gap: getSpaceValue(1),
        font-size: getFontSizeValue(2),
        button-border-radius: getRadiusValue(2),
        button-padding-inline: getSpaceValue(3),
        button-line-height: getLineHeightValue(2),
        button-height: getSpaceValue(6),
      )
    );
    @include e(indicator) {
      border-radius: getRadiusValue(2, false);
    }
  }
  @include size(3) {
    #{$size}: calc(#{getSpaceValue(4)} * 1.25);
    @include setVars(
      (
        gap: getSpaceValue(1),
        font-size: getFontSizeValue(3),
        button-border-radius: getRadiusValue(3),
        button-padding-inline: getSpaceValue(4),
        button-line-height: getLineHeightValue(3),
        button-height: getSpaceValue(7),
      )
    );
    @include e(indicator) {
      border-radius: getRadiusValue(2, false);
    }
  }
}

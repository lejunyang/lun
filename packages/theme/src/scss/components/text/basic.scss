@use '../../mixins' as *;

:host {
  color: getGrayColor(12);
}

:host([color]) {
  color: getAccentColor(a11);
}

:host([color][high-contrast]) {
  color: getAccentColor(12);
}

:host([gray-color]) {
  color: getGrayColor(12);
}

:host([ellipsis='center']) {
  word-break: break-all;
}

@include b(text) {
  @at-root {
    :host([as='code']) {
      --fm: 'Menlo', 'Consolas', 'Bitstream Vera Sans Mono', monospace, 'Apple Color Emoji', 'Segoe UI Emoji';
      --p: 0.1em 0.25em;
      @include declareVarValues(
        (
          font-family: (
            code-font-family,
            var(--fm),
          ),
          padding: (
            code-padding,
            var(--p),
          ),
          border-radius: (
            code-border-radius,
            calc((0.5px + 0.2em) * getVarValue(($radius-name, factor))),
          ),
        )
      );
    }

    :host([as='blockquote']) {
      box-sizing: border-box;
      --pis: min(#{getSpaceValue(5)}, max(#{getSpaceValue(3)}, 0.5em));
      --bis: max(#{getSpaceValue(1)}, 0.25em) solid #{getAccentColor(a6)};
      @include declareVarValues(
        (
          padding-inline-start: (
            blockquote-padding-inline-start,
            var(--pis),
          ),
          border-inline-start: (
            blockquote-border-inline-start,
            var(--bis),
          ),
        )
      );
    }

    a {
      cursor: pointer;
      color: getAccentColor(a11);
      text-decoration-color: getAccentColor(a5);
      text-decoration-style: solid;
      text-decoration-thickness: min(2px, max(1px, 0.05em));
      text-underline-offset: calc(0.025em + 2px);
    }
    :host([as='link'][disabled]) {
      cursor: not-allowed;
    }
    a#{getIs(disabled)} {
      pointer-events: none;
      color: getGrayColor(a11);
      text-decoration-color: getGrayColor(a5);
    }
  }
}

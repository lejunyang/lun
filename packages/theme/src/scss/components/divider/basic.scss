@use '../../mixins/bem' as *;
@use '../../mixins/theme' as *;
@use '../../mixins/function' as *;
@use '../../mixins/config' as *;

:host {
  display: contents;
}

@include b(divider) {
  display: flex;
  width: 100%;

  &::before,
  &::after {
    position: relative;
    content: '';
    border-width: 0;
    flex-grow: 1;
    width: 50%;
    transform: translateY(50%);
    border-block-start: getRVarValue(size, 1px) solid getRVarValue('color', getGrayColor(a4));
  }
  @include e(text) {
    white-space: nowrap;
  }

  @include m(text-start) {
    &::before {
      width: calc(#{getRVarValue((text, indent, ratio), 0.05)} * 100%);
      flex-grow: 0;
    }
    @include is(custom-indent) {
      &::before {
        width: getRVarValue((text, indent));
      }
    }
  }
  @include m(text-end) {
    &::after {
      width: calc(#{getRVarValue((text, indent, ratio), 0.05)} * 100%);
      flex-grow: 0;
    }
    @include is(custom-indent) {
      &::after {
        width: getRVarValue((text, indent));
      }
    }
  }

  @include is(slotted) {
    @include e(text) {
      padding-inline-start: getRVarValue((text, padding, start), getSpaceValue(3));
      padding-inline-end: getRVarValue((text, padding, end), getSpaceValue(3));
    }
  }

  @include is(dashed) {
    &::before,
    &::after {
      border-style: dashed;
    }
  }

  @include m(vertical) {
    display: inline-flex;
    flex-direction: column;
    width: unset;
    height: 1em;
    vertical-align: super;
    @include e(text) {
      padding-inline-start: getRVarValue((text, padding, start), getSpaceValue(3));
      padding-inline-end: getRVarValue((text, padding, end), getSpaceValue(3));
    }
    &::before,
    &::after {
      width: unset;
      height: 50%;
      transform: translateX(50%);
      border-block-start: 0;
      border-inline-start: getRVarValue(size, 1px) solid getRVarValue('color', getGrayColor(a4));
    }
  }
}

@use '../../mixins' as *;

@include b(calendar) {
  display: inline-flex;
  flex-direction: column;
  color: getSemanticColor('text');

  @include declareReuseVars((cell-border-radius, cell-min-width, cell-min-height, cell-line-height, inner-padding));

  @include e(content) {
    position: relative;
    overflow: hidden;
    text-align: center;
    display: grid;
    @supports (grid-template-rows: subgrid) {
      grid-template-columns: repeat(getRVarValue(cols), 1fr);
    }
  }

  @include e(head) {
    background: getSemanticColor('background');
    position: relative;
    z-index: 2;
    display: grid;
    grid-row: 1;
    grid-column: 1 / -1;
    @supports (grid-template-rows: subgrid) {
      grid-template: auto/subgrid;
    }
    @supports not (grid-template-rows: subgrid) {
      grid-template-columns: repeat(getRVarValue(cols), 1fr);
    }
  }

  @include e(body) {
    position: relative;
    display: grid;
    grid-row: 2;
    grid-column: 1 / -1;
    @supports (grid-template-rows: subgrid) {
      grid-template: auto/subgrid;
    }
    @supports not (grid-template-rows: subgrid) {
      grid-template-columns: repeat(getRVarValue(cols), 1fr);
    }
  }

  // --- for panel has three bodies ---
  @include e(wrapper) {
    display: grid;
    grid-column: 1 / -1;
    grid-auto-flow: column; // make grid scrollable
    scroll-snap-type: x mandatory;
    overflow-x: auto;
    -ms-overflow-style: none;
    scrollbar-width: none;
    &::-webkit-scrollbar {
      width: 0;
      height: 0;
    }
    @supports (grid-template-rows: subgrid) {
      grid-template: auto/subgrid;
    }
    @include e(body, true) {
      scroll-snap-align: start;
      // scroll-snap-stop: always; // do not set this, seems it will affect scroll check in Calendar.tsx
    }
  }
  @include em(body, current, true) {
    transform: translate(100%);
  }
  @include em(body, next, true) {
    transform: translate(200%);
  }
  // --- for panel has three bodies ---

  @include e(inner) {
    position: relative;
    @include reuseVars(
      (
        min-width: cell-min-width,
        min-height: cell-min-height,
        line-height: cell-line-height,
        padding: inner-padding,
        border-radius: cell-border-radius,
      )
    );
  }

  @include em(cell, body, true) {
    @include isN(inView) {
      @include e(inner) {
        color: getGrayColor(9);
      }
    }
  }

  @include e(cell) {
    overflow: hidden;
    @include declareVars(
      (
        padding: cell-padding,
      )
    );
    @include is(now) {
      @include e(inner) {
        box-shadow: inset 0 0 0 1px getAccentColor(a8);
      }
    }
    @include multiIs((selectingStart, selectingEnd, inSelecting)) {
      @include e(inner) {
        color: getAccentColor(a11);
        &::before {
          content: '';
          position: absolute;
          inset: 0px;
          border-block: 1px dashed getAccentColor(a8);
        }
      }
    }
    @include multiIs((singleSelected, rangeStart, rangeEnd)) {
      @include e(inner) {
        background-color: getAccentColor(9);
        color: getAccentColor(contrast);
      }
    }
    @include multiIs((rangeStart, rangeEnd)) {
      @include e(inner) {
        &::after {
          content: '';
          position: absolute;
          inset: 0;
          background-color: getAccentColor(a3);
          @include reuseVars(
            (
              border-radius: cell-border-radius,
            )
          );
        }
      }
    }
    @include is(rangeStart) {
      @include e(inner) {
        &::after {
          inset-inline-end: -50%;
        }
      }
    }
    @include is(rangeEnd) {
      @include e(inner) {
        &::after {
          inset-inline-start: -50%;
        }
      }
    }
    @include is(oneDayRange) {
      @include e(inner) {
        &::after {
          // for a range only contains one day, do not span
          inset-inline: 0;
        }
      }
    }
    @include is(selectingStart) {
      @include e(inner) {
        &::before {
          border-inline-start: 1px dashed getAccentColor(a8);
          inset-inline-end: -50%;
          @include reuseVars(
            (
              border-radius: cell-border-radius,
            )
          );
        }
      }
    }
    @include is(selectingEnd) {
      @include e(inner) {
        &::before {
          border-inline-end: 1px dashed getAccentColor(a8);
          inset-inline-start: -50%;
          @include reuseVars(
            (
              border-radius: cell-border-radius,
            )
          );
        }
      }
    }
    @include is((selectingStart, selectingEnd)) {
      @include e(inner) {
        &::before {
          // for a range only contains one day, do not span
          inset-inline: 0px;
        }
      }
    }
    @include is(inSelecting) {
      @include e(inner) {
        &::before {
          left: -50%;
          right: -50%;
        }
      }
    }
    @include is(inRange) {
      @include e(inner) {
        &::after {
          content: '';
          position: absolute;
          inset: 0 -50% 0 -50%;
          background-color: getAccentColor(a3);
        }
      }
    }
    @include is((focusing, inView)) {
      @include e(inner) {
        outline: 2px solid getAccentColor(8);
        outline-offset: -1px;
      }
    }
  }

  @include e(header) {
    display: flex;
    padding-block: 1px;
    @include declareVars(
      (
        padding-inline: cell-padding,
        gap: header-gap,
      )
    );
  }
  @include e(info) {
    flex-grow: 1;
    display: flex;
    justify-content: center;
  }
  @include e(info-btn) {
    color: getSemanticColor('text');
    font-weight: bold;
  }
  @at-root {
    button {
      background: transparent;
      border: 0;
      cursor: pointer;
      outline: none;
      display: inline-flex;
      justify-content: center;
      align-items: center;
      &:focus-visible {
        outline: 1px solid getFocusColor();
      }
      @include declareVarValues(
        (
          color: (
            button-color,
            getGrayColor(11),
          ),
        )
      );
      @include reuseVars(
        (
          min-width: cell-min-width,
          height: cell-min-height,
          line-height: cell-line-height,
          padding: inner-padding,
          border-radius: cell-border-radius,
        )
      );
    }
  }

  @include size(1) {
    @include setVars(
      (
        cell-padding: getSpaceValue(1),
        cell-min-width: getSpaceValue(4),
        cell-min-height: getSpaceValue(4),
        cell-line-height: getSpaceValue(4),
        cell-border-radius: getRadiusValue(1, 'full'),
        header-gap: getSpaceValue(1),
      )
    );
  }

  @include size(2) {
    @include setVars(
      (
        cell-padding: getSpaceValue(2),
        cell-min-width: getSpaceValue(5),
        cell-min-height: getSpaceValue(5),
        cell-line-height: getSpaceValue(5),
        cell-border-radius: getRadiusValue(2, 'full'),
        inner-padding: calc(#{getSpaceValue(1)} / 2),
        header-gap: getSpaceValue(2),
      )
    );
  }

  @include size(3) {
    @include setVars(
      (
        cell-padding: getSpaceValue(3),
        cell-min-width: getSpaceValue(6),
        cell-min-height: getSpaceValue(6),
        cell-line-height: getSpaceValue(6),
        cell-border-radius: getRadiusValue(3, 'full'),
        inner-padding: getSpaceValue(1),
        header-gap: getSpaceValue(3),
      )
    );
  }
}

// found that slideRight and slideDown can cause layout jitter, no idea why
// if we remove overflow: hidden for content element, they both work fine, but we can't remove that
// found that use animation for slideRight and slideDown, not transition, and set animation-delay for enter element, can also fix the jitter issue
.slideRight-enter-active,
.slideDown-enter-active {
  animation-delay: 1ms;
}

// also set longer delay for leave element, to cover the enter element
.slideRight-leave-active,
.slideDown-leave-active {
  animation-delay: 2ms;
}

.date-enter-from,
.date-enter-from {
  scale: 1.05;
  opacity: 0;
}

.date-enter-to,
.date-enter-to {
  scale: 1;
  opacity: 1;
}

.date-enter-active {
  transition: all 0.2s;
}

.date-leave-active {
  display: none;
}

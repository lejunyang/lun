@use '../../mixins/bem' as *;
@use '../../mixins/theme' as *;
@use '../../mixins/function' as *;
@use '../../mixins/config' as *;

@include b(textarea) {
  display: grid;
  @include declareVars((font-size));
  @include setVars(
    (
      icon-size: 0,
    )
  );
  @include is(with-clear-icon) {
    @include setVars(
      (
        icon-size: var(--font-size),
      )
    );
  }

  @include e(wrapper) {
    position: relative;
    display: flex;
  }

  @include e(textarea) {
    background: transparent;
    appearance: none;
    scrollbar-width: thin;
    outline: none;
    border: none;
    padding-inline-end: calc(var(--padding-inline-start) * 1.2 + var(--icon-size));
    @include declareVars((padding-block, padding-inline-start, line-height, letter-spacing, border-radius));

    &:focus {
      outline: 2px solid getFocusColor();
      outline-offset: -1px;
    }
  }

  @include e('background') {
    position: absolute;
    inset: 0;
    z-index: 0;
    pointer-events: none;
    outline-color: transparent;
  }

  @include e(clear-icon) {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    opacity: 0;
    transition: opacity 0.2s;
    pointer-events: none;
    @include declareVars(
      (
        inset-inline-end: padding-inline-start,
      )
    );
  }

  // show clear icon when textarea is hovered or focused, and not empty
  :is(&:hover, &:focus-within) {
    @include isN(empty) {
      @include e(clear-icon) {
        opacity: 1;
        cursor: pointer;
        pointer-events: auto;
      }
    }
  }

  @include size(1) {
    @include setVars(
      (
        padding-block: calc(getSpaceValue(1)),
        padding-inline-start: calc(getSpaceValue(1) * 1.5),
        line-height: getLineHeightValue(1),
        letter-spacing: getLetterSpacingValue(1),
        font-size: getFontSizeValue(1),
        border-radius: getRadiusValue(2),
      )
    );
  }
  @include size(2) {
    @include setVars(
      (
        padding-block: calc(getSpaceValue(1) * 1.5),
        padding-inline-start: calc(getSpaceValue(2)),
        line-height: getLineHeightValue(2),
        letter-spacing: getLetterSpacingValue(2),
        font-size: getFontSizeValue(2),
        border-radius: getRadiusValue(2),
      )
    );
  }
  @include size(3) {
    @include setVars(
      (
        padding-block: calc(getSpaceValue(2)),
        padding-inline-start: calc(getSpaceValue(3)),
        line-height: getLineHeightValue(3),
        letter-spacing: getLetterSpacingValue(3),
        font-size: getFontSizeValue(3),
        border-radius: getRadiusValue(3),
      )
    );
  }
}

@use 'config';

@function join($list, $separator: config.$common-separator) {
  $result: '';
  @each $item in $list {
    @if $item != '' {
      $result: $result + $separator + $item;
    }
  }
  @return $result;
}

// getVarName(('button', 'text-color')) => '--l-button-text-color'
@function getVarName($list) {
  @return '--' + config.$namespace + join($list);
}

// getVarValue(('button', 'text-color'), red) => var(--l-button-text-color, red)
@function getVarValue($args, $default: '') {
  @if $default == '' {
    @return var(#{getVarName($args)});
  }
  @return var(#{getVarName($args)}, #{$default});
}

// getBEM('block', 'element', 'modifier') => 'l-block__element--modifier'
@function getBEM($block, $element: '', $modifier: '') {
  $name: config.$namespace + config.$common-separator + $block;
  @if $element != '' {
    $name: $name + config.$element-separator + $element;
  }
  @if $modifier != '' {
    $name: $name + config.$modifier-separator + $modifier;
  }
  @return $name;
}

@function selectorToString($selector) {
  $selector: inspect(
    $selector
  ); // inspect(...) 表达式中的内容如果是正常会返回对应的内容，如果发生错误则会弹出一个错误提示。
  $selector: str-slice($selector, 2, -2); // str-slice
  @return $selector;
}
// if contains '--'
@function containsModifier($selector) {
  $selector: selectorToString($selector);

  // str-index find the first index of the second argument in the first argument
  @if str-index($selector, config.$modifier-separator) {
    @return true;
  } @else {
    @return false;
  }
}
// if contains '.is-'
@function containWhenFlag($selector) {
  $selector: selectorToString($selector);

  @if str-index($selector, '.' + config.$state-prefix) {
    @return true;
  } @else {
    @return false;
  }
}
// if contains ':'
@function containPseudoClass($selector) {
  $selector: selectorToString($selector);

  @if str-index($selector, ':') {
    @return true;
  } @else {
    @return false;
  }
}

/// if contains 'variant'
@function containsVariant($selector) {
  $selector: selectorToString($selector);

  @if str-index($selector, config.$modifier-separator + 'variant') {
    @return true;
  } @else {
    @return false;
  }
}

// if contains `--` `.is-` or `:`
@function hitAllSpecialNestRule($selector) {
  @return containsModifier($selector) or containWhenFlag($selector) or containPseudoClass($selector);
}

@use 'config' as *;
@use 'function' as *;

@mixin semanticColor($name, $value) {
  --#{$namespace}-color-#{$name}: #{$value};
}

@function getSemanticColor($name) {
  @return var(--#{$namespace}-color-#{$name});
}

@function getColor($color, $level, $default: '') {
  @return getVarValue(($color, $level), $default);
}

@function getAccentColor($level: 1, $contrastLevel: 9) {
  @if $level == 'surface' {
    @return getVarValue(('color', surface, $accent-name));
  } @else if $level == 'contrast' {
    @return getVarValue(($accent-name, $contrastLevel, contrast));
  } @else {
    @return getVarValue(($accent-name, $level), $default-accent-color);
  }
}

@function getContrastColor($color, $level: 9) {
  @return getVarValue(($color, $level, contrast));
}

@function getGrayColor($level: 1) {
  @return getVarValue(($gray-name, $level), $default-gray-color);
}

@mixin lightTheme($isLight: true) {
  @if $isLight {
    &:where([appearance='light']) {
      @content;
    }
    @media (prefers-color-scheme: light) {
      &:where([root]:not([appearance='light'], [appearance='dark'])) {
        @content;
      }
    }
  } @else {
    &:where([appearance='dark']) {
      @content;
    }
    @media (prefers-color-scheme: dark) {
      &:where([root]:not([appearance='light'], [appearance='dark'])) {
        @content;
      }
    }
  }
}

@function getScaleVarName() {
  @return #{'--' + $namespace + '-' + $scale-name};
}

@function getSpaceValue($level) {
  @return getVarValue(($space-name, $level));
}

// typography
@function getFontSizeVarName() {
  @return #{'--' + $namespace + '-' + $font-size-name};
}

@function getFontSizeValue($level) {
  @return getVarValue(($font-size-name, $level));
}

@function getLetterSpacingVarName() {
  @return #{'--' + $namespace + '-' + $letter-spacing-name};
}

@function getLetterSpacingValue($level) {
  @return getVarValue(($letter-spacing-name, $level));
}

@function getLineHeightVarName() {
  @return #{'--' + $namespace + '-' + $line-height-name};
}

@function getLineHeightValue($level) {
  @return getVarValue(($line-height-name, $level));
}

// radius
@function getRadiusValue($level) {
  @return max(getVarValue(($radius-name, $level)), getVarValue(($radius-full-name)));
}

@function getDisabledCursor() {
  @return var(--#{$namespace}-cursor-disabled, not-allowed);
}

// focus selection autofill color
@function getFocusColorName() {
  @return #{'--' + $namespace + '-' + $focus-color-name};
}

@function getSelectionColorName() {
  @return #{'--' + $namespace + '-' + $selection-color-name};
}

@function getAutofillColorName() {
  @return #{'--' + $namespace + '-' + $autofill-color-name};
}

@function getFocusColor() {
  @return var(getFocusColorName());
}

@function getSelectionColor() {
  @return var(getSelectionColorName());
}

@function getAutofillColor() {
  @return var(getAutofillColorName());
}

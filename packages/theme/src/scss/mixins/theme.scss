@use 'config' as *;
@use 'function' as *;
@use 'sass:map';

@mixin semanticColor($name, $value) {
  --#{$namespace}-color-#{$name}: #{$value};
}

@function getSemanticColor($name) {
  @return var(--#{$namespace}-color-#{$name});
}

@function getColor($color, $level, $default: '') {
  @return getVarValue(($color, $level), $default);
}

@function getAccentColor($level: 1, $contrastLevel: 9) {
  @if $level == 'surface' {
    @return getVarValue(('color', surface, $accent-name));
  } @else if $level == 'contrast' {
    @return getVarValue(($accent-name, $contrastLevel, contrast));
  } @else {
    @return getVarValue(($accent-name, $level));
  }
}

@function getContrastColor($color, $level: 9) {
  @return getVarValue(($color, $level, contrast));
}

@function getGrayColor($level: 1) {
  @return getVarValue(($gray-name, $level));
}

@mixin lightTheme($isLight: true) {
  @if $isLight {
    &:where([appearance='light']) {
      @content;
    }
    @media (prefers-color-scheme: light) {
      &:where([root]:not([appearance='light'], [appearance='dark'])) {
        @content;
      }
    }
  } @else {
    &:where([appearance='dark']) {
      @content;
    }
    @media (prefers-color-scheme: dark) {
      &:where([root]:not([appearance='light'], [appearance='dark'])) {
        @content;
      }
    }
  }
}

@function getScaleVarName() {
  @return #{'--' + $namespace + '-' + $scale-name};
}

@function getScaleValue() {
  @return var(#{getScaleVarName()});
}

@function getSpaceValue($level, $isHypot: false) {
  @if $isHypot {
    @return getVarValue(($space-name, 'hypot', $level));
  }
  @return getVarValue(($space-name, $level));
}

// typography
@function getFontSizeVarName() {
  @return #{'--' + $namespace + '-' + $font-size-name};
}

@function getFontWeightVarName() {
  @return #{'--' + $namespace + '-' + $font-weight-name};
}

@function getFontWeightValue($name) {
  @return getVarValue(($font-weight-name, $name));
}

@function getFontSizeValue($level) {
  @return getVarValue(($font-size-name, $level));
}

@function getLetterSpacingVarName() {
  @return #{'--' + $namespace + '-' + $letter-spacing-name};
}

@function getLetterSpacingValue($level) {
  @return getVarValue(($letter-spacing-name, $level));
}

@function getLineHeightVarName() {
  @return #{'--' + $namespace + '-' + $line-height-name};
}

@function getLineHeightValue($level) {
  @return getVarValue(($line-height-name, $level));
}

// radius
@function getRadiusValue($level, $isFull: true) {
  $name: $radius-full-name;
  @if not $isFull {
    $name: $radius-thumb-name;
  }
  @return max(getVarValue(($radius-name, $level)), getVarValue(($name)));
}

// cursor

@function getDisabledCursor() {
  @return var(--#{$namespace}-cursor-disabled, not-allowed);
}

@function getLoadingCursor() {
  @return var(--#{$namespace}-cursor-loading, progress);
}

// focus selection autofill color
@function getFocusColorName() {
  @return #{'--' + $namespace + '-' + $focus-color-name};
}

@function getSelectionColorName() {
  @return #{'--' + $namespace + '-' + $selection-color-name};
}

@function getAutofillColorName() {
  @return #{'--' + $namespace + '-' + $autofill-color-name};
}

@function getFocusColor() {
  @return var(getFocusColorName());
}

@function getSelectionColor() {
  @return var(getSelectionColorName());
}

@function getAutofillColor() {
  @return var(getAutofillColorName());
}

// shadow
@function getShadow($level) {
  @return getVarValue((shadow, $level));
}

// ------------------ color mixins ------------------

// color level 9 contrast color
@mixin generateContrastColor($level: 9) {
  @each $color in $color-list {
    $value: map.get($contrast-color-map, $color);
    @if not $value {
      $value: white;
    }
    #{getVarName(($color, $level, contrast))}: $value;
  }
}

// generate accent color
@mixin generateColorProperties($color) {
  #{getVarName((color, surface, $accent-name))}: getVarValue(($color, surface)); // generate accent surface color
  #{getVarName(($accent-name, 9, contrast))}: getContrastColor($color); // generate accent contrast color for level 9
  @for $num from 1 through 12 {
    #{getVarName(($accent-name, $num))}: var(#{getVarName(($color, $num))});
    #{getVarName(($accent-name, 'a' + $num))}: var(#{getVarName(($color, 'a' + $num))});
  }
  // focus selection autofill color, they all use accent color so need to place them in same level with accent color
  #{getFocusColorName()}: getAccentColor(8);
  #{getSelectionColorName()}: getAccentColor(a5);
  #{getAutofillColorName()}: getAccentColor(a3);
}

// generate styles for theme-provider or elements with color="xxx" accent-color="xxx"
@mixin generateThemeColor($color, $noSelector: false) {
  @if $noSelector {
    @include generateColorProperties($color);
  } @else {
    [#{$accent-color-name + '=' + $color}],
    [#{$color-name + '=' + $color}] {
      @include generateColorProperties($color);
    }
  }
}

@mixin mapGrayColor($target, $noSelector: false) {
  @if $noSelector {
    @for $num from 1 through 12 {
      #{getVarName(($gray-name, $num))}: var(#{getVarName(($target, $num))});
      #{getVarName(($gray-name, 'a' + $num))}: var(#{getVarName(($target, 'a' + $num))});
    }
  } @else {
    &:where([#{$gray-color-name + '=' + $target}]) {
      @for $num from 1 through 12 {
        #{getVarName(($gray-name, $num))}: var(#{getVarName(($target, $num))});
        #{getVarName(($gray-name, 'a' + $num))}: var(#{getVarName(($target, 'a' + $num))});
      }
    }
  }
}
@use 'config' as *;
@use 'function' as *;

@mixin semanticColor($name, $value) {
  --#{$namespace}-color-#{$name}: #{$value};
}

@function getSemanticColor($name) {
  @return var(--#{$namespace}-color-#{$name});
}

@function getColor($color, $level, $default: '') {
  @return getVarValue(($color, $level), $default);
}

@function getAccentColor($level: 1) {
  @return getVarValue(($accent-name, $level), $default-accent-color);
}

@mixin appearance($isLight: true) {
  @if $isLight {
    &:where([appearance='light']) {
      @content;
    }
    @media (prefers-color-scheme: light) {
      &:where([root]:not([appearance='light'], [appearance='dark'])) {
        @content;
      }
    }
  } @else {
    &:where([appearance='dark']) {
      @content;
    }
    @media (prefers-color-scheme: dark) {
      &:where([root]:not([appearance='light'], [appearance='dark'])) {
        @content;
      }
    }
  }
}

@function getScaleVarName() {
  @return #{'--' + $namespace + '-' + $scale-name};
}

@function getSpaceValue($level) {
  @return getVarValue(($space-name, $level));
}

@function getFontSizeVarName() {
  @return #{'--' + $namespace + '-' + $font-size-name};
}

@function getFontSizeValue($level) {
  @return getVarValue(($font-size-name, $level));
}

@function getLetterSpacingVarName() {
  @return #{'--' + $namespace + '-' + $letter-spacing-name};
}

@function getLetterSpacingValue($level) {
  @return getVarValue(($letter-spacing-name, $level));
}

@function getRadiusValue($level) {
  @return getVarValue(($radius-name, $level));
}
@use 'config';
@use 'function' as *;
@use 'sass:map';

@mixin where {
  $WHERE: true !global;
  @content;
  $WHERE: false !global;
}

@mixin root($name) {
  $CE: config.$namespace + config.$common-separator + $name !global;
  @at-root {
    @content;
  }
}

// block
@mixin b($block: '') {
  @if $block == '' {
    $B: $CE !global;
  } @else {
    $B: config.$namespace + config.$common-separator + $block !global;
  }
  .#{$B} {
    @content;
  }
}

// element
@mixin e($element, $underParent: null) {
  // $E: $element !global;
  $selector: &;
  $E: #{$B + config.$element-separator + $element} !global;
  $currentSelector: #{'.' + $E};

  @if $underParent == null {
    $underParent: hitAllSpecialNestRule($selector);
  }
  @if $underParent {
    @at-root {
      #{$selector} {
        #{$currentSelector} {
          @content;
        }
      }
    }
  } @else {
    @at-root {
      #{$currentSelector} {
        @content;
      }
    }
  }
}

@mixin em($element, $modifier, $atRoot: false) {
  @if $atRoot {
    @at-root {
      .#{$B + config.$element-separator + $element + config.$modifier-separator + $modifier} {
        @content;
      }
    }
  } @else {
    .#{$B + config.$element-separator + $element + config.$modifier-separator + $modifier} {
      @content;
    }
  }
}

@mixin m($modifier) {
  $selector: &;
  $currentSelector: '';
  @each $unit in $modifier {
    $currentSelector: #{$currentSelector + $selector + config.$modifier-separator + $unit};
    @if $WHERE {
      $currentSelector: #{':where(' + $currentSelector + ')'};
    }
    $currentSelector: #{$currentSelector + ','};
  }
  @at-root {
    #{$currentSelector} {
      @content;
    }
  }
}

@function getM($modifier) {
  @return #{'.' + $B + config.$modifier-separator + $modifier};
}

// withParent: false => selector will be under parent; true => selector will be connected after parent
@mixin is($state, $withParent: true, $atRoot: false) {
  $selector: '';
  @if type-of($state) == 'list' {
    @each $s in $state {
      $selector: $selector + '.' + config.$state-prefix + $s;
    }
  } @else {
    $selector: '.' + config.$state-prefix + $state;
  }
  @if map.get(config.$with-where-map, 'is') {
    $selector: ':where(' + $selector + ')';
  }
  @if $atRoot {
    @at-root {
      @if $withParent {
        &#{$selector} {
          @content;
        }
      } @else {
        #{$selector} {
          @content;
        }
      }
    }
  } @else {
    @if $withParent {
      &#{$selector} {
        @content;
      }
    } @else {
      #{$selector} {
        @content;
      }
    }
  }
}

@function getIs($state, $pre: '') {
  $selector: '';
  @if type-of($state) == 'list' {
    @each $s in $state {
      $selector: $selector + '.' + config.$state-prefix + $s;
    }
  } @else {
    $selector: '.' + config.$state-prefix + $state;
  }
  @if map.get(config.$with-where-map, 'is') {
    $selector: ':where(' + $selector + ')';
  }
  @return #{$pre + $selector};
}

@function blockInRoot($block: '') {
  @if $block == '' {
    @return $CE;
  } @else {
    @return $CE + config.$common-separator + $block;
  }
}

@function getE($element) {
  @return #{'.' + $B + config.$element-separator + $element};
}

@function getEM($element, $modifier) {
  @return #{'.' + $B + config.$element-separator + $element + config.$modifier-separator + $modifier};
}

@mixin size($size) {
  @at-root {
    $selector: $B + config.$modifier-separator + 'size-' + $size;
    .#{$selector} {
      @content;
    }
    @each $breakpoint, $width in config.$breakpoints-map {
      @media (min-width: $width) {
        .#{$breakpoint + '-' + $selector} {
          @content;
        }
      }
    }
  }
}

@function getVariant($variant) {
  @return getM('variant-' + $variant);
}

@mixin variant($variant, $withParent: true) {
  $P: '';
  @if $withParent {
    $P: &;
  }
  @at-root {
    #{$P}:where(#{getVariant($variant)}) {
      @content;
    }
  }
}

@use 'config';

@mixin where {
  $WHERE: true !global;
  @content;
  $WHERE: false !global;
}

@mixin root($name) {
  $CE: config.$namespace + config.$common-separator + $name !global;
  @at-root {
    @content;
  }
}

// block
@mixin b($block: '') {
  @if $block == '' {
    $B: $CE !global;
  } @else {
    $B: config.$namespace + config.$common-separator + $block !global;
  }
  .#{$B} {
    @content;
  }
}

// element
@mixin e($element, $underParent: false) {
  // $E: $element !global;
  $selector: &;
  $E: #{$B + config.$element-separator + $element} !global;
  $currentSelector: #{'.' + $E};

  @if $underParent and hitAllSpecialNestRule($selector) {
    @at-root {
      #{$selector} {
        #{$currentSelector} {
          @content;
        }
      }
    }
  } @else {
    @at-root {
      #{$currentSelector} {
        @content;
      }
    }
  }
}

@mixin em($element, $modifier, $atRoot: false) {
  @if $atRoot {
    @at-root {
      .#{$B + config.$element-separator + $element + config.$modifier-separator + $modifier} {
        @content;
      }
    }
  } @else {
    .#{$B + config.$element-separator + $element + config.$modifier-separator + $modifier} {
      @content;
    }
  }
}

@mixin m($modifier) {
  $selector: &;
  $currentSelector: '';
  @each $unit in $modifier {
    $currentSelector: #{$currentSelector + $selector + config.$modifier-separator + $unit};
    @if $WHERE {
      $currentSelector: #{':where(' + $currentSelector + ')'};
    }
    $currentSelector: #{$currentSelector + ','};
  }
  @at-root {
    #{$currentSelector} {
      @content;
    }
  }
}

@function getM($modifier) {
  @return #{'.' + $B + config.$modifier-separator + $modifier};
}

@mixin is($state, $withParent: false, $atRoot: false) {
  @if $atRoot {
    @at-root {
      @if $withParent {
        &.#{config.$state-prefix + $state} {
          @content;
        }
      } @else {
        .#{config.$state-prefix + $state} {
          @content;
        }
      }
    }
  } @else {
    @if $withParent {
      &.#{config.$state-prefix + $state} {
        @content;
      }
    } @else {
      .#{config.$state-prefix + $state} {
        @content;
      }
    }
  }
}

@function getIs($state, $pre: '') {
  @return #{$pre + '.' + config.$state-prefix + $state};
}

@function blockInRoot($block: '') {
  @if $block == '' {
    @return $CE;
  } @else {
    @return $CE + config.$common-separator + $block;
  }
}

@function getE($element) {
  @return #{'.' + $B + config.$element-separator + $element};
}

@mixin size($size) {
  @at-root {
    :where(.#{$B + config.$modifier-separator + 'size-' + $size}) {
      @content;
    }
  }
}

@mixin variant($variant, $withParent: true) {
  $P: '';
  @if $withParent {
    $P: &;
  }
  @at-root {
    #{$P}:where(#{getM('variant-' + $variant)}) {
      @content;
    }
  }
}

@use 'config';
@use 'function' as *;
@use 'sass:map';
@use 'sass:list';

// block
@mixin b($block: '') {
  $Root: $block !global;
  $B: config.$namespace + config.$common-separator + $block !global;
  .#{$B} {
    @content;
  }
}

// element
@mixin e($element, $underParent: null) {
  // $E: $element !global;
  $selector: &;
  $E: #{$B + config.$element-separator + $element} !global;
  $currentSelector: #{'.' + $E};

  @if $underParent == null {
    $underParent: hitAllSpecialNestRule($selector);
  }
  @if $underParent {
    @at-root {
      #{$selector} {
        #{$currentSelector} {
          @content;
        }
      }
    }
  } @else {
    @at-root {
      #{$currentSelector} {
        @content;
      }
    }
  }
}

@mixin em($element, $modifier, $atRoot: false) {
  @if $atRoot {
    @at-root {
      .#{$B + config.$element-separator + $element + config.$modifier-separator + $modifier} {
        @content;
      }
    }
  } @else {
    .#{$B + config.$element-separator + $element + config.$modifier-separator + $modifier} {
      @content;
    }
  }
}

@mixin m($modifier) {
  $selector: &;
  $currentSelector: '';
  @each $unit in $modifier {
    $currentSelector: #{$currentSelector + $selector + config.$modifier-separator + $unit};
    @if map.get(config.$with-where-map, 'modifier') {
      $currentSelector: #{':where(' + $currentSelector + ')'};
    }
    $currentSelector: #{$currentSelector + ','};
  }
  @at-root {
    #{$currentSelector} {
      @content;
    }
  }
}

@function getM($modifier) {
  $temp: #{'.' + $B + config.$modifier-separator + $modifier};
  @if map.get(config.$with-where-map, 'modifier') {
    $temp: #{':where(' + $temp + ')'};
  }
  @return $temp;
}

@mixin basicIs($state, $withParent: true, $atRoot: false, $isNot: false) {
  $selector: '';
  @if type-of($state) == 'list' {
    @each $s in $state {
      $selector: $selector + '.' + config.$state-prefix + $s;
    }
  } @else {
    $selector: '.' + config.$state-prefix + $state;
  }
  @if $isNot {
    $selector: ':not(' + $selector + ')';
  }
  @if map.get(config.$with-where-map, 'is') {
    $selector: ':where(' + $selector + ')';
  }
  @if $atRoot {
    @at-root {
      @if $withParent {
        &#{$selector} {
          @content;
        }
      } @else {
        #{$selector} {
          @content;
        }
      }
    }
  } @else {
    @if $withParent {
      &#{$selector} {
        @content;
      }
    } @else {
      #{$selector} {
        @content;
      }
    }
  }
}

// withParent: false => selector will be under parent; true => selector will be connected after parent
@mixin is($state, $withParent: true, $atRoot: false) {
  @include basicIs($state, $withParent, $atRoot, false) {
    @content;
  }
}

@mixin multiIs($listState, $withParent: true, $atRoot: false) {
  @each $s in $listState {
    @include basicIs($s, $withParent, $atRoot, false) {
      @content;
    }
  }
}

@mixin isN($state, $withParent: true, $atRoot: false) {
  @include basicIs($state, $withParent, $atRoot, true) {
    @content;
  }
}

@function basicGetIsN($state, $pre: '', $noWhere: false, $isNot: false) {
  $selector: '';
  @if type-of($state) == 'list' {
    @each $s in $state {
      $selector: $selector + '.' + config.$state-prefix + $s;
    }
  } @else {
    $selector: '.' + config.$state-prefix + $state;
  }
  @if $isNot {
    $selector: ':not(' + $selector + ')';
  }
  @if map.get(config.$with-where-map, 'is') and not $noWhere {
    $selector: ':where(' + $selector + ')';
  }
  @return #{$pre + $selector};
}

@function getIs($state, $pre: '', $noWhere: false) {
  @return basicGetIsN($state, $pre, $noWhere, false);
}

@function getIsN($state, $pre: '', $noWhere: false) {
  @return basicGetIsN($state, $pre, $noWhere, true);
}

@function blockInRoot($block: '') {
  @if $block == '' {
    @return $CE;
  } @else {
    @return $CE + config.$common-separator + $block;
  }
}

@function getE($element) {
  @return #{'.' + $B + config.$element-separator + $element};
}

@function getEM($element, $modifier) {
  @return #{'.' + $B + config.$element-separator + $element + config.$modifier-separator + $modifier};
}

@mixin size($size, $atRoot: true) {
  $selector: $B + config.$modifier-separator + 'size-' + $size;
  @if $atRoot {
    @at-root {
      .#{$selector} {
        @content;
      }
      // media query is moved to js side to reduce css size
      // @each $breakpoint, $width in config.$breakpoints-map {
      //   @media (min-width: $width) {
      //     .#{$breakpoint + '-' + $selector} {
      //       @content;
      //     }
      //   }
      // }
    }
  } @else {
    &.#{$selector} {
      @content;
    }
    // @each $breakpoint, $width in config.$breakpoints-map {
    //   @media (min-width: $width) {
    //     &.#{$breakpoint + '-' + $selector} {
    //       @content;
    //     }
    //   }
    // }
  }
}

@function getVariant($variant) {
  @return getM('variant-' + $variant);
}

@mixin variant($variant, $withParent: true) {
  $P: '';
  @if $withParent {
    $P: &;
  }
  @at-root {
    #{$P}:where(#{getVariant($variant)}) {
      @content;
    }
  }
}

@mixin hover($excludeSelector: null) {
  @if $excludeSelector {
    $excludeSelector: ':not(' + $excludeSelector + ')';
  }
  @if map.get(config.$with-where-map, 'hover') {
    &:where(:hover)#{$excludeSelector} {
      @content;
    }
  } @else {
    &:hover#{$excludeSelector} {
      @content;
    }
  }
}

@mixin active($excludeSelector: null, $withEnabled: true) {
  @if $excludeSelector {
    $excludeSelector: ':not(' + $excludeSelector + ')';
  }
  $pseudo: ':active';
  @if $withEnabled {
    $pseudo: $pseudo + ':enabled'; // disabled button can still be active, so add :enabled
  }
  @if map.get(config.$with-where-map, 'active') {
    &:where(#{$pseudo})#{$excludeSelector} {
      @content;
    }
  } @else {
    &#{$pseudo}#{$excludeSelector} {
      @content;
    }
  }
}

/// inside @include b(button) { ... }
/// getRVarName(padding) => --l-button-padding
/// getRVarName((label, padding)) => --l-button-label-padding
@function getRVarName($list) {
  @return getVarName(list.join($Root, $list));
}

/// inside @include b(button) { ... }
/// getRVarValue(padding) => var(--l-button-padding)
/// getRVarValue((label, padding), 1px) => var(--l-button-label-padding, 1px)
@function getRVarValue($args, $default: '') {
  @return getVarValue(list.join($Root, $args), $default);
}

/// inside @include b(button) { ... }
/// getDeclaredVar(padding) => var(--l-button-padding, var(--padding));
/// getDeclaredVar(label-padding) => var(--l-button-label-padding, var(--label-padding));
@function getDeclaredVar($name) {
  @return var(#{getRVarName($name)}, var(#{'--' + $name}));
}

/// inside @include b(button) { ... }
/// declareVars((padding, margin)) => padding: var(--l-padding, var(--padding)); margin: var(--l-margin, var(--margin));
/// declareVars((padding: icon-padding, margin: icon-margin)) => padding: var(--l-icon-padding, var(--icon-padding)); margin: var(--l-icon-margin, var(--icon-margin));
@mixin declareVars($varListOrMap) {
  @each $name, $alias in $varListOrMap {
    @if $alias {
      #{$name}: getDeclaredVar($alias);
    } @else {
      #{$name}: getDeclaredVar($name);
    }
  }
}

/// declare reuseable vars to reduce duplicate `var(--outer-var, var(--inner-var))`
/// inside @include b(button) { ... }
/// declareReuseVars((padding, margin), true) => --_padding: var(--l-padding, var(--padding)); padding: var(--_padding); --_margin: var(--l-margin, var(--margin)); margin: var(--_margin);
@mixin declareReuseVars($varListOrMap, $withVarValue: false) {
  @each $name, $alias in $varListOrMap {
    @if $alias {
      --_#{$alias}: #{getDeclaredVar($alias)};
      @if $withVarValue {
        #{$name}: var(--_#{$alias});
      }
    } @else {
      --_#{$name}: #{getDeclaredVar($name)};
      @if $withVarValue {
        #{$name}: var(--_#{$name});
      }
    }
  }
}

/// use it when parent has used declareReuseVars
@mixin reuseVars($varListOrMap) {
  @each $name, $alias in $varListOrMap {
    @if $alias {
      #{$name}: var(--_#{$alias});
    } @else {
      #{$name}: var(--_#{$name});
    }
  }
}

/// inside @include b(button) { ... }
/// declareVarValues((padding: 5px)) => padding: var(--l-button-padding, 5px);
/// declareVarValues((padding: (label-padding, 5px))) => padding: var(--l-button-label-padding, 5px);
/// remind that declareVarValues((transition: all 0.3s)) will be compiled to transition: var(--l-button-transition-all, 0.3s) !!! need to wrap the value with quotes
@mixin declareVarValues($varValMap) {
  @each $prop, $nameVal in $varValMap {
    $name: '';
    $val: '';
    @if list.length($nameVal) == 1 {
      $name: $prop;
      $val: list.nth($nameVal, 1);
    } @else {
      $name: list.nth($nameVal, 1);
      $val: list.nth($nameVal, 2);
    }
    #{$prop}: #{getRVarValue($name, $val)};
  }
}

/// setVars((padding: 10px, margin: 20px)) => --padding: 10px; --margin: 20px;
@mixin setVars($varMap) {
  @each $name, $value in $varMap {
    // #{'--' + $name}: #{getRVarValue($name, $value)};
    #{'--' + $name}: $value;
  }
}

import { createImportStyle, GlobalStaticConfig } from '@lun/components';
import { supportCSSDisplayP3 } from '@lun/utils';
// light
import {
  amber,
  amberA,
  blackA,
  blue,
  blueA,
  bronze,
  bronzeA,
  brown,
  brownA,
  crimson,
  crimsonA,
  cyan,
  cyanA,
  gold,
  goldA,
  grass,
  grassA,
  gray,
  grayA,
  green,
  greenA,
  indigo,
  indigoA,
  iris,
  irisA,
  jade,
  jadeA,
  lime,
  limeA,
  mauve,
  mauveA,
  mint,
  mintA,
  olive,
  oliveA,
  orange,
  orangeA,
  pink,
  pinkA,
  plum,
  plumA,
  purple,
  purpleA,
  red,
  redA,
  ruby,
  rubyA,
  sage,
  sageA,
  sand,
  sandA,
  sky,
  skyA,
  slate,
  slateA,
  teal,
  tealA,
  tomato,
  tomatoA,
  violet,
  violetA,
  whiteA,
  yellow,
  yellowA,
} from '@radix-ui/colors';
// dark
import {
  amberDark,
  amberDarkA,
  blueDark,
  blueDarkA,
  bronzeDark,
  bronzeDarkA,
  brownDark,
  brownDarkA,
  crimsonDark,
  crimsonDarkA,
  cyanDark,
  cyanDarkA,
  goldDark,
  goldDarkA,
  grassDark,
  grassDarkA,
  grayDark,
  grayDarkA,
  greenDark,
  greenDarkA,
  indigoDark,
  indigoDarkA,
  irisDark,
  irisDarkA,
  jadeDark,
  jadeDarkA,
  limeDark,
  limeDarkA,
  mauveDark,
  mauveDarkA,
  mintDark,
  mintDarkA,
  oliveDark,
  oliveDarkA,
  orangeDark,
  orangeDarkA,
  pinkDark,
  pinkDarkA,
  plumDark,
  plumDarkA,
  purpleDark,
  purpleDarkA,
  redDark,
  redDarkA,
  rubyDark,
  rubyDarkA,
  sageDark,
  sageDarkA,
  sandDark,
  sandDarkA,
  skyDark,
  skyDarkA,
  slateDark,
  slateDarkA,
  tealDark,
  tealDarkA,
  tomatoDark,
  tomatoDarkA,
  violetDark,
  violetDarkA,
  yellowDark,
  yellowDarkA,
} from '@radix-ui/colors';
// p3 light
import {
  amberP3,
  amberP3A,
  blackP3A,
  blueP3,
  blueP3A,
  bronzeP3,
  bronzeP3A,
  brownP3,
  brownP3A,
  crimsonP3,
  crimsonP3A,
  cyanP3,
  cyanP3A,
  goldP3,
  goldP3A,
  grassP3,
  grassP3A,
  grayP3,
  grayP3A,
  greenP3,
  greenP3A,
  indigoP3,
  indigoP3A,
  irisP3,
  irisP3A,
  jadeP3,
  jadeP3A,
  limeP3,
  limeP3A,
  mauveP3,
  mauveP3A,
  mintP3,
  mintP3A,
  oliveP3,
  oliveP3A,
  orangeP3,
  orangeP3A,
  pinkP3,
  pinkP3A,
  plumP3,
  plumP3A,
  purpleP3,
  purpleP3A,
  redP3,
  redP3A,
  rubyP3,
  rubyP3A,
  sageP3,
  sageP3A,
  sandP3,
  sandP3A,
  skyP3,
  skyP3A,
  slateP3,
  slateP3A,
  tealP3,
  tealP3A,
  tomatoP3,
  tomatoP3A,
  violetP3,
  violetP3A,
  whiteP3A,
  yellowP3,
  yellowP3A,
} from '@radix-ui/colors';
// p3 dark
import {
  amberDarkP3,
  amberDarkP3A,
  blueDarkP3,
  blueDarkP3A,
  bronzeDarkP3,
  bronzeDarkP3A,
  brownDarkP3,
  brownDarkP3A,
  crimsonDarkP3,
  crimsonDarkP3A,
  cyanDarkP3,
  cyanDarkP3A,
  goldDarkP3,
  goldDarkP3A,
  grassDarkP3,
  grassDarkP3A,
  grayDarkP3,
  grayDarkP3A,
  greenDarkP3,
  greenDarkP3A,
  indigoDarkP3,
  indigoDarkP3A,
  irisDarkP3,
  irisDarkP3A,
  jadeDarkP3,
  jadeDarkP3A,
  limeDarkP3,
  limeDarkP3A,
  mauveDarkP3,
  mauveDarkP3A,
  mintDarkP3,
  mintDarkP3A,
  oliveDarkP3,
  oliveDarkP3A,
  orangeDarkP3,
  orangeDarkP3A,
  pinkDarkP3,
  pinkDarkP3A,
  plumDarkP3,
  plumDarkP3A,
  purpleDarkP3,
  purpleDarkP3A,
  redDarkP3,
  redDarkP3A,
  rubyDarkP3,
  rubyDarkP3A,
  sageDarkP3,
  sageDarkP3A,
  sandDarkP3,
  sandDarkP3A,
  skyDarkP3,
  skyDarkP3A,
  slateDarkP3,
  slateDarkP3A,
  tealDarkP3,
  tealDarkP3A,
  tomatoDarkP3,
  tomatoDarkP3A,
  violetDarkP3,
  violetDarkP3A,
  yellowDarkP3,
  yellowDarkP3A,
} from '@radix-ui/colors';

const light = [
  amber,
  amberA,
  blue,
  blueA,
  bronze,
  bronzeA,
  brown,
  brownA,
  crimson,
  crimsonA,
  cyan,
  cyanA,
  gold,
  goldA,
  grass,
  grassA,
  gray,
  grayA,
  green,
  greenA,
  indigo,
  indigoA,
  iris,
  irisA,
  jade,
  jadeA,
  lime,
  limeA,
  mauve,
  mauveA,
  mint,
  mintA,
  olive,
  oliveA,
  orange,
  orangeA,
  pink,
  pinkA,
  plum,
  plumA,
  purple,
  purpleA,
  red,
  redA,
  ruby,
  rubyA,
  sage,
  sageA,
  sand,
  sandA,
  sky,
  skyA,
  slate,
  slateA,
  teal,
  tealA,
  tomato,
  tomatoA,
  violet,
  violetA,
  yellow,
  yellowA,
];
const dark = [
  amberDark,
  amberDarkA,
  blueDark,
  blueDarkA,
  bronzeDark,
  bronzeDarkA,
  brownDark,
  brownDarkA,
  crimsonDark,
  crimsonDarkA,
  cyanDark,
  cyanDarkA,
  goldDark,
  goldDarkA,
  grassDark,
  grassDarkA,
  grayDark,
  grayDarkA,
  greenDark,
  greenDarkA,
  indigoDark,
  indigoDarkA,
  irisDark,
  irisDarkA,
  jadeDark,
  jadeDarkA,
  limeDark,
  limeDarkA,
  mauveDark,
  mauveDarkA,
  mintDark,
  mintDarkA,
  oliveDark,
  oliveDarkA,
  orangeDark,
  orangeDarkA,
  pinkDark,
  pinkDarkA,
  plumDark,
  plumDarkA,
  purpleDark,
  purpleDarkA,
  redDark,
  redDarkA,
  rubyDark,
  rubyDarkA,
  sageDark,
  sageDarkA,
  sandDark,
  sandDarkA,
  skyDark,
  skyDarkA,
  slateDark,
  slateDarkA,
  tealDark,
  tealDarkA,
  tomatoDark,
  tomatoDarkA,
  violetDark,
  violetDarkA,
  yellowDark,
  yellowDarkA,
];

const lightP3 = [
  amberP3,
  amberP3A,
  blueP3,
  blueP3A,
  bronzeP3,
  bronzeP3A,
  brownP3,
  brownP3A,
  crimsonP3,
  crimsonP3A,
  cyanP3,
  cyanP3A,
  goldP3,
  goldP3A,
  grassP3,
  grassP3A,
  grayP3,
  grayP3A,
  greenP3,
  greenP3A,
  indigoP3,
  indigoP3A,
  irisP3,
  irisP3A,
  jadeP3,
  jadeP3A,
  limeP3,
  limeP3A,
  mauveP3,
  mauveP3A,
  mintP3,
  mintP3A,
  oliveP3,
  oliveP3A,
  orangeP3,
  orangeP3A,
  pinkP3,
  pinkP3A,
  plumP3,
  plumP3A,
  purpleP3,
  purpleP3A,
  redP3,
  redP3A,
  rubyP3,
  rubyP3A,
  sageP3,
  sageP3A,
  sandP3,
  sandP3A,
  skyP3,
  skyP3A,
  slateP3,
  slateP3A,
  tealP3,
  tealP3A,
  tomatoP3,
  tomatoP3A,
  violetP3,
  violetP3A,
  yellowP3,
  yellowP3A,
];

const darkP3 = [
  amberDarkP3,
  amberDarkP3A,
  blueDarkP3,
  blueDarkP3A,
  bronzeDarkP3,
  bronzeDarkP3A,
  brownDarkP3,
  brownDarkP3A,
  crimsonDarkP3,
  crimsonDarkP3A,
  cyanDarkP3,
  cyanDarkP3A,
  goldDarkP3,
  goldDarkP3A,
  grassDarkP3,
  grassDarkP3A,
  grayDarkP3,
  grayDarkP3A,
  greenDarkP3,
  greenDarkP3A,
  indigoDarkP3,
  indigoDarkP3A,
  irisDarkP3,
  irisDarkP3A,
  jadeDarkP3,
  jadeDarkP3A,
  limeDarkP3,
  limeDarkP3A,
  mauveDarkP3,
  mauveDarkP3A,
  mintDarkP3,
  mintDarkP3A,
  oliveDarkP3,
  oliveDarkP3A,
  orangeDarkP3,
  orangeDarkP3A,
  pinkDarkP3,
  pinkDarkP3A,
  plumDarkP3,
  plumDarkP3A,
  purpleDarkP3,
  purpleDarkP3A,
  redDarkP3,
  redDarkP3A,
  rubyDarkP3,
  rubyDarkP3A,
  sageDarkP3,
  sageDarkP3A,
  sandDarkP3,
  sandDarkP3A,
  skyDarkP3,
  skyDarkP3A,
  slateDarkP3,
  slateDarkP3A,
  tealDarkP3,
  tealDarkP3A,
  tomatoDarkP3,
  tomatoDarkP3A,
  violetDarkP3,
  violetDarkP3A,
  yellowDarkP3,
  yellowDarkP3A,
];

const appearances = ['light', 'dark'];
const gen = (colors: any[], index = 0) => {
  const forAll = index === -1,
    appearance = appearances[index],
    revert = appearances[1 - index];
  const vars = colors
    .map((color) =>
      Object.entries(color)
        .map(([key, value], i) => {
          const si = '' + (i + 1);
          let colorName = key.slice(0, -si.length),
            isAlpha = colorName.endsWith('A');
          if (isAlpha) colorName = colorName.slice(0, -1);
          return `--${GlobalStaticConfig.namespace}-${colorName}-${isAlpha ? 'a' : ''}${i + 1}: ${value}`;
        })
        .join(';'),
    )
    .join(';');
  // FIXME safari doesn't support :where(:host)????
  return (
    `:where(:host(${forAll ? '[data-root]' : `[appearance=${appearance}]`})){${vars}}` +
    (forAll
      ? ''
      : `@media (prefers-color-scheme: ${appearance}){:where(:host([data-root]:not([appearance=${revert}]))){${vars}}}`)
  );
};

export const importAllColors = createImportStyle('common', () => {
  // there should be black and white for all appearances
  return gen(light) + gen(dark, 1) + gen([blackA, whiteA], -1);
});

export const importAllP3Colors = createImportStyle('common', () => {
  return supportCSSDisplayP3 && matchMedia('(color-gamut: p3)').matches
    ? gen(lightP3) + gen(darkP3, 1) + +gen([blackP3A, whiteP3A], -1)
    : '';
});
